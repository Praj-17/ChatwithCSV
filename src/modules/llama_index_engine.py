# -*- coding: utf-8 -*-
"""pandas_query_engine.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/run-llama/llama_index/blob/main/docs/docs/examples/query_engine/pandas_query_engine.ipynb

<a href="https://colab.research.google.com/github/run-llama/llama_index/blob/main/docs/docs/examples/query_engine/pandas_query_engine.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

# Pandas Query Engine

This guide shows you how to use our `PandasQueryEngine`: convert natural language to Pandas python code using LLMs.

The input to the `PandasQueryEngine` is a Pandas dataframe, and the output is a response. The LLM infers dataframe operations to perform in order to retrieve the result.

**WARNING:** This tool provides the LLM access to the `eval` function.
Arbitrary code execution is possible on the machine running this tool.
While some level of filtering is done on code, this tool is not recommended
to be used in a production setting without heavy sandboxing or virtual machines.

If you're opening this Notebook on colab, you will probably need to install LlamaIndex ðŸ¦™.
"""


import logging
import sys

import pandas as pd
from llama_index.experimental.query_engine import PandasQueryEngine
import openai

from llama_index.llms.gemini import Gemini
import os
import asyncio
from dotenv import load_dotenv
load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")
os.environ["GOOGLE_API_KEY"] =os.getenv("GOOGLE_API_KEY")

llm = Gemini(
    model="models/gemini-1.5-flash",
    # api_key="some key",  # uses GOOGLE_API_KEY env var by default
)




logging.basicConfig(stream=sys.stdout, level=logging.INFO)
logging.getLogger().addHandler(logging.StreamHandler(stream=sys.stdout))

"""## Let's start on a Toy DataFrame

Here let's load a very simple dataframe containing city and population pairs, and run the `PandasQueryEngine` on it.

By setting `verbose=True` we can see the intermediate generated instructions.
"""

if __name__ == "__main__":
    # Test on some sample data
    df = pd.read_csv(r"E:\Prajwal\ChatwithCSV\src\data\data.csv")

    query_engine = PandasQueryEngine(df=df, verbose=True, llm=llm)

    response = asyncio.run(str(query_engine.aquery(
        "What country population has the highest buy average?",
    )))

    print(str(response))
    print(type(response))

